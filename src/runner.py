import importlib
import itertools
import os
import numpy as np

from src import landscape
import copy

# Reload the module to ensure that any changes made to it are reflected
landscape = importlib.reload(landscape)


def run_wrapper(sweep_data, sweep_generators, mdp, params, k, v):
    """
    Run the policy landscape generator with a specific parameter configuration.

    Args:
        sweep_data: List to store data generated by the landscape generator.
        sweep_generators: List to store landscape generator instances.
        mdp: Markov Decision Process instance.
        params: Dictionary of parameters for the landscape generator.
        k: Key of the parameter to be modified.
        v: Value of the parameter to be modified.

    Returns:
        Updated lists of data and generator instances after running the landscape generator.
    """
    # Create a copy of the parameters dictionary and update it with the new key-value pair
    tmp_params = params.copy()
    tmp_params[k] = v

    # Run the landscape generator with the updated parameters
    generators, data = run(mdp, tmp_params)

    # Extend the lists with the new data and generator instances
    sweep_data.extend(data)
    sweep_generators.extend(generators)

    return sweep_data, sweep_generators


def run(mdp, params, base_log_dir=None):
    """
    Run the policy landscape generator with given parameters.

    Args:
        mdp: Markov Decision Process instance.
        params: Dictionary of parameters for the landscape generator.

    Returns:
        List of landscape generator instances and corresponding data.
    """
    # Create a generator instance and run it to generate data
    generator = landscape.PolicyLandscape(mdp, **params)
    data = generator.iterative_optimization(base_log_dir=base_log_dir)

    return [generator], [data]


def interpolate(mdp, params):
    """
    Run the policy landscape generator with given parameters.

    Args:
        mdp: Markov Decision Process instance.
        params: Dictionary of parameters for the landscape generator.

    Returns:
        List of landscape generator instances and corresponding data.
    """
    # Create a generator instance and run it to generate data
    generator = landscape.PolicyLandscape(mdp, **params)
    data = generator.optimization_landscape()

    return [generator], [data]


def dict_product(d):
    """
    Generate the Cartesian product of values in a dictionary.

    Args:
        d: Dictionary where each value is an iterable.

    Yields:
        Dictionary containing one element from each iterable in the Cartesian product.
    """
    keys = d.keys()
    for element in itertools.product(*d.values()):
        yield dict(zip(keys, element))


def run_sweep(mdp, sweep_params, run_loop="optimization", base_log_dir=None):
    """
    Run a sweep over multiple parameter configurations.

    Args:
        mdp: Markov Decision Process instance.
        sweep_params: Dictionary of parameters to sweep over.

    Returns:
        Lists of landscape generator instances and corresponding data for each parameter configuration.
    """
    sweep_data = []
    sweep_generators = []

    # Iterate over each parameter configuration and run the landscape generator
    for i, params in enumerate(list(dict_product(sweep_params))):
        base_log_dir_add = f"__seed_{i}"
        base_log_dir_var = os.path.join(base_log_dir, base_log_dir_add) if base_log_dir is not None else base_log_dir_add

        if run_loop == "optimization":
            gen, dat = run(mdp, params, base_log_dir=base_log_dir_var)
        else:
            gen, dat = interpolate(mdp, params, base_log_dir=base_log_dir_var)
        sweep_generators.extend(gen)
        sweep_data.extend(dat)

    return sweep_generators, sweep_data


def run_alg_on_mdp(mdp, run_loop, sweep_params, base_log_dir=None):
    """
    Run an algorithm on an MDP instance with a parameter sweep.

    Args:
        mdp: Markov Decision Process instance.
        run_loop (str): Method to run for each parameter configuration. Options: "optimization" or "interpolation".
        sweep_params: Dictionary of parameters to sweep over.
        base_log_dir (str): Base directory for saving logs.

    Returns:
        tuple: Lists of all parameters, landscape generator instances, and corresponding data for each parameter configuration.
    """
    all_params = []
    all_generator = []
    all_data = []
    # Define parameters for the sweep

    # Run the parameter sweep
    generator, data = run_sweep(mdp, sweep_params, run_loop=run_loop, base_log_dir=base_log_dir)

    # Append results to lists
    all_generator.append(generator)
    all_data.append(data)

    return all_params, all_generator, all_data


def batch_run_alg_on_mdp(mdp, batch_param_key, batch_param_values, sweep_params,
                         run_loop, base_log_dir=None):
    """
    Run an algorithm on an MDP instance with a batch parameter sweep.

    Args:
       mdp: Markov Decision Process instance.
       batch_param_key (str): Key of the parameter to vary in the batch.
       batch_param_values (list): List of values for the batch parameter.
       sweep_params: Dictionary of parameters to sweep over.
       run_loop (str): Method to run for each parameter configuration. Options: "optimization" or "interpolation".
       base_log_dir (str): Base directory for saving logs.

    Returns:
       tuple: Lists of all parameters, landscape generator instances, and corresponding data for each parameter configuration.
    """
    all_params = []
    all_generator = []
    all_data = []
    # Iterate over each value of the batch parameter
    for batch_param_var in batch_param_values:
        base_log_dir_add = f"__{batch_param_key}_{batch_param_var}"
        base_log_dir_var = os.path.join(base_log_dir, base_log_dir_add) if base_log_dir is not None else base_log_dir_add
        # Update sweep parameters with the current value of the batch parameter
        sweep_params_aux = copy.deepcopy(sweep_params)
        sweep_params_aux[batch_param_key] = [batch_param_var]
        all_params_, all_generator_, all_data_ = run_alg_on_mdp(mdp, run_loop, sweep_params_aux,
                                                                base_log_dir=base_log_dir_var)
        # Append results to lists
        all_params.extend(all_params_)
        all_generator.extend(all_generator_)
        all_data.extend(all_data_)
        # Clean up sweep parameters
        del sweep_params_aux

    return all_params, all_generator, all_data


def run_alg(mdps, run_loop, sweep_params, base_log_dir):
    """
    Run an algorithm on multiple MDP instances.

    Args:
        mdps (list): List of Markov Decision Process instances.
        run_loop (str): Method to run for each parameter configuration. Options: "optimization" or "interpolation".
        sweep_params: Dictionary of parameters to sweep over.
        base_log_dir (str): Base directory for saving logs.

    Returns:
        tuple: Lists of all parameters, landscape generator instances, and corresponding data for each parameter configuration.
    """
    all_params = []
    all_generator = []
    all_data = []

    # Iterate over each MDP instance
    for mdp_no, mdp in enumerate(mdps):
        base_log_dir_var = os.path.join(base_log_dir, f"__mdp_{mdp_no}")
        # Run algorithm on current MDP instance
        all_params_, all_generator_, all_data_ = run_alg_on_mdp(mdp, run_loop, sweep_params,
                                                                base_log_dir=base_log_dir_var)
        # Append results to lists
        all_params.append(all_params_)
        all_generator.append(all_generator_)
        all_data.append(all_data_)

    return all_params, all_generator, all_data


def batch_run_alg(mdps, batch_param_key, batch_param_values, run_loop, sweep_params, base_log_dir=None):
    """
    Run an algorithm on multiple MDP instances with a batch parameter sweep.

    Args:
        mdps (list): List of Markov Decision Process instances.
        batch_param_key (str): Name of the batch parameter.
        batch_param_values (list): Values of the batch parameter to sweep over.
        run_loop (str): Method to run for each parameter configuration. Options: "optimization" or "interpolation".
        sweep_params (dict): Dictionary of parameters to sweep over.
        base_log_dir (str): Base directory for saving logs.

    Returns:
        tuple: Lists of all parameters, landscape generator instances, and corresponding data for each parameter configuration.
    """
    all_params = []
    all_generator = []
    all_data = []

    # Iterate over each MDP instance
    for mdp_no, mdp in enumerate(mdps):
        base_log_dir_add = f"__mdp_{mdp_no}"
        base_log_dir_var = os.path.join(base_log_dir, base_log_dir_add) if base_log_dir is not None else base_log_dir_add
        # Run algorithm with batch parameter sweep on current MDP instance
        all_params_, all_generator_, all_data_ = batch_run_alg_on_mdp(mdp, batch_param_key, batch_param_values,
                                                                      sweep_params, run_loop, base_log_dir=base_log_dir_var)
        # Append results to lists
        all_params.append(all_params_)
        all_generator.append(all_generator_)
        all_data.append(all_data_)

    return all_params, all_generator, all_data